{
	"info": {
		"_postman_id": "c7847bf9-ed43-4b89-85df-21699e698da4",
		"name": "Give My Secret Application",
		"description": "# Give My Secret Postman Collection\n\nThe goal of this collection is to provide ready-to-go samples to connect with Give My Secret credential storage application.\n\nYou can find useful samples for all APIs:\n\n- API keys\n    \n- Keystores\n    \n- Secrets\n    \n- API query\n    \n- User management\n    \n- Events\n    \n- Announcements\n    \n- Authentication\n    \n\n# Links & resources\n\nMain page:\n\n[https://peter-szrnka.github.io/give-my-secret/](https://peter-szrnka.github.io/give-my-secret/)\n\nGitHub repository:\n\n[https://github.com/peter-szrnka/give-my-secret](https://github.com/peter-szrnka/give-my-secret)\n\nSonar (backend side):\n\n[https://sonarcloud.io/project/overview?id=peter-szrnka_give-my-secret-backend](https://sonarcloud.io/project/overview?id=peter-szrnka_give-my-secret-backend)\n\nSonar (frontend side):\n\n[https://sonarcloud.io/summary/new_code?id=peter-szrnka_give-my-secret-frontend](https://sonarcloud.io/summary/new_code?id=peter-szrnka_give-my-secret-frontend)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1160908"
	},
	"item": [
		{
			"name": "System",
			"item": [
				{
					"name": "Get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate HTTP return code\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check initial status is 'NEED_SETUP'\", function() {\r",
									"    pm.expect(jsonData.status).to.be.eq(\"NEED_SETUP\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/system/status",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"system",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"adminUserId\", jsonData.entityId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Peter Szrnka\",\r\n    \"username\" : \"admin\",\r\n    \"email\" : \"peter.szrnka@gmail.com\",\r\n    \"credential\" : \"Test1234\",\r\n    \"description\" : \"secret\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/setup/user",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"setup",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"description": "This sub-collection can be executed only if the system is fresh and there no users created."
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "User management",
					"item": [
						{
							"name": "Save User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"deletableUserId\", jsonData.entityId);\r",
											"\r",
											"pm.test(\"Validate HTTP return code\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Save was successful\", function() {\r",
											"    pm.expect(jsonData.success).is.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{test_user}}2\",\r\n    \"name\" : \"{{test_user_name}}2\",\r\n    \"email\" : \"{{test_user_email}}2\",\r\n    \"credential\" : \"{{test_pass}}2\",\r\n    \"description\" : \"Test user2\",\r\n    \"role\" : \"ROLE_USER\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/user",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Admin user exists\", function() {\r",
											"    const adminUserCount = jsonData.resultList.filter(user => user.roles.filter(role => \"ROLE_ADMIN\" === role).count()).count();\r",
											"    pm.expect(adminUserCount).eq(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Simple deletable user exists\", function() {\r",
											"    const userCount = jsonData.resultList.filter(user => user.roles.filter(role => \"ROLE_USER\" === role).count()).count();\r",
											"    pm.expect(userCount).eq(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host_url}}/secure/user/list?page=0&size=10&direction=ASC&property=id",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"user",
										"list"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "property",
											"value": "id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"UserId matches\", function() {\r",
											"    pm.expect(jsonData.id).eq(pm.environment.get(\"deletableUserId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"User is active\", function() {\r",
											"    pm.expect(jsonData.status).eq(\"ACTIVE\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/user/{{deletableUserId}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"user",
										"{{deletableUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/user/{{deletableUserId}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"user",
										"{{deletableUserId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create permanent test user",
					"item": [
						{
							"name": "Save User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"userId\", jsonData.entityId);\r",
											"\r",
											"pm.test(\"Validate HTTP return code\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Save was successful\", function() {\r",
											"    pm.expect(jsonData.success).is.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"{{test_user}}\",\r\n    \"name\" : \"{{test_user_name}}\",\r\n    \"email\" : \"{{test_user_email}}\",\r\n    \"credential\" : \"{{test_pass}}\",\r\n    \"description\" : \"Test user\",\r\n     \"roles\" : [\"ROLE_USER\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/user",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"UserId matches\", function() {\r",
											"    pm.expect(jsonData.id).eq(pm.environment.get(\"deletableUserId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"User is active\", function() {\r",
											"    pm.expect(jsonData.status).eq(\"ACTIVE\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/user/{{userId}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Announcements",
					"item": [
						{
							"name": "Save announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"announcementId\", jsonData.entityId);\r",
											"\r",
											"pm.test(\"Validate HTTP return code\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\" : \"First announcement\",\r\n    \"description\" : \"Very first announcement\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/announcement",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"announcement"
									]
								}
							},
							"response": []
						},
						{
							"name": "List announcements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"List is not empty\", function() {\r",
											"    pm.expect(jsonData.resultList.length).greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host_url}}/secure/announcement/list?direction=ASC&property=id&page=0&size=10",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"announcement",
										"list"
									],
									"query": [
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "property",
											"value": "id"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get one announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Title matches\", function() {\r",
											"    pm.expect(jsonData.title).eq(\"First announcement\");\r",
											"});\r",
											"\r",
											"pm.test(\"Description matches\", function() {\r",
											"    pm.expect(jsonData.description).eq(\"Very first announcement\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/announcement/{{announcementId}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"announcement",
										"{{announcementId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete one announcement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/announcement/{{announcementId}}",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"announcement",
										"{{announcementId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Events",
					"item": [
						{
							"name": "List events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check event list exists\", function() {\r",
											"    pm.expect(jsonData.resultList).is.not.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check event list is not empty\", function() {\r",
											"    pm.expect(jsonData.resultList.length).greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host_url}}/secure/event/list?direction=ASC&property=id&page=0&size=10",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"event",
										"list"
									],
									"query": [
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "property",
											"value": "id"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "System properties",
					"item": [
						{
							"name": "List system properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"List is not empty\", function() {\r",
											"    pm.expect(jsonData.resultList.length).greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host_url}}/secure/system_property/list?direction=ASC&property=id&page=0&size=10",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"system_property",
										"list"
									],
									"query": [
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "property",
											"value": "id"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a system property Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host_url}}/secure/system_property/ORGANIZATION_NAME",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"system_property",
										"ORGANIZATION_NAME"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save new system property Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"ORGANIZATION_NAME\",\r\n    \"value\": \"Test organization\",\r\n    \"type\": \"STRING\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host_url}}/secure/system_property",
									"host": [
										"{{host_url}}"
									],
									"path": [
										"secure",
										"system_property"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{admin_user}}\",\r\n    \"credential\" : \"Asdf1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/authenticate",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Technical user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"technical1\",\r\n    \"credential\" : \"Asdf1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/authenticate",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{test_user}}\",\r\n    \"credential\" : \"{{test_pass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/authenticate",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host_url}}/logoutUser",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"logoutUser"
							]
						}
					},
					"response": []
				}
			],
			"description": "Samples for login and logout."
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Change password",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oldCredential\" : \"{{test_pass}}\",\r\n    \"newCredential\" : \"{{test_pass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/user/change_credential",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"user",
								"change_credential"
							]
						}
					},
					"response": []
				}
			],
			"description": "# User settings"
		},
		{
			"name": "Api keys",
			"item": [
				{
					"name": "Save API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"apiKeyId\", jsonData.entityId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\" : \"{{userId}}\",\r\n    \"name\" : \"api key\",\r\n    \"description\" : \"secret\",\r\n    \"value\" : \"test1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all API key names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response list is not empty\", function() {\r",
									"    pm.expect(pm.response.json().resultList).is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/list_names",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"list_names"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable an API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/{{apiKeyId}}?enabled=false",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"{{apiKeyId}}"
							],
							"query": [
								{
									"key": "enabled",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "API key is disabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"API key is active\", function() {\r",
									"    pm.expect(jsonData.status).eq(\"DISABLED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/{{apiKeyId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"{{apiKeyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable an API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/{{apiKeyId}}?enabled=true",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"{{apiKeyId}}"
							],
							"query": [
								{
									"key": "enabled",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"API key is active\", function() {\r",
									"    pm.expect(jsonData.status).eq(\"ACTIVE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/{{apiKeyId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"{{apiKeyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an API key value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/value/{{apiKeyId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"value",
								"{{apiKeyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all API key for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response list is not empty\", function() {\r",
									"    pm.expect(jsonData.resultList).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"API key is active\", function() {\r",
									"    pm.expect(jsonData.resultList[0].status).eq(\"ACTIVE\");\r",
									"});\r",
									"\r",
									"if (pm.environment.get(\"apiKeyId\") === undefined) {\r",
									"    pm.environment.set(\"apiKeyId\", jsonData.resultList[0].id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host_url}}/secure/apikey/list?direction=ASC&property=id&page=0&size=10",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"list"
							],
							"query": [
								{
									"key": "direction",
									"value": "ASC"
								},
								{
									"key": "property",
									"value": "id"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/{{apiKeyId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"{{apiKeyId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Sample requests that call the API key related endpoints."
		},
		{
			"name": "Keystores",
			"item": [
				{
					"name": "Save keystore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"keystoreId\", jsonData.entityId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"contentType": "multipart/form-data",
									"type": "file",
									"src": "test2.jks"
								},
								{
									"key": "model",
									"value": "{ \"name\":\"keystore1\",\"userId\" : {{userId}}, \"alias\" : \"test\", \"credential\" : \"test\", \"aliasCredential\" : \"test\", \"description\" : \"test\", \"type\" :\"JKS\", \"status\":\"ACTIVE\",\"fileName\" :\"test2.jks\" ,\"status\":\"ACTIVE\"}",
									"contentType": "application/json",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a keystore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/{{keystoreId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"{{keystoreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all keystore names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response list is not empty\", function() {\r",
									"    pm.expect(pm.response.json().resultList).is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/list_names",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"list_names"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get keystore KEYSTORE_CREDENTIAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Value equals\", function() {\r",
									"    pm.expect(pm.response.text()).eq(\"test\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\" : {{keystoreId}},\r\n    \"valueType\" : \"KEYSTORE_CREDENTIAL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/value",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get keystore KEYSTORE_ALIAS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Value equals\", function() {\r",
									"    pm.expect(pm.response.text()).eq(\"test\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\" : {{keystoreId}},\r\n    \"valueType\" : \"KEYSTORE_ALIAS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/value",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get keystore KEYSTORE_ALIAS_CREDENTIAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Value equals\", function() {\r",
									"    pm.expect(pm.response.text()).eq(\"test\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entityId\" : {{keystoreId}},\r\n    \"valueType\" : \"KEYSTORE_ALIAS_CREDENTIAL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/value",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable a keystore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/{{keystoreId}}?enabled=false",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"{{keystoreId}}"
							],
							"query": [
								{
									"key": "enabled",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Keystore is disabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"API key is active\", function() {\r",
									"    pm.expect(jsonData.status).eq(\"DISABLED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/{{keystoreId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"{{keystoreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable keystore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/{{keystoreId}}?enabled=true",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"{{keystoreId}}"
							],
							"query": [
								{
									"key": "enabled",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Keystore is enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"API key is active\", function() {\r",
									"    pm.expect(jsonData.status).eq(\"ACTIVE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/{{keystoreId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"{{keystoreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all keystores of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host_url}}/secure/keystore/list?direction=ASC&property=id&page=0&size=10",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"list"
							],
							"query": [
								{
									"key": "direction",
									"value": "ASC"
								},
								{
									"key": "property",
									"value": "id"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete keystore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/{{keystoreId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"{{keystoreId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Sample requests that call the Keystore related endpoints."
		},
		{
			"name": "Secrets",
			"item": [
				{
					"name": "List all keystore names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response list is not empty\", function() {\r",
									"    pm.expect(pm.response.json().resultList).is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/keystore/list_names",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"keystore",
								"list_names"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all API key names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response list is not empty\", function() {\r",
									"    pm.expect(pm.response.json().resultList).is.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/apikey/list_names",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"apikey",
								"list_names"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"secretId\", jsonData.entityId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\" : \"{{userId}}\",\r\n    \"secretId\" : \"secret1\",\r\n    \"keystoreId\" : \"{{keystoreId}}\",\r\n    \"value\" : \"test\",\r\n    \"rotationPeriod\" : \"HOURLY\",\r\n    \"returnDecrypted\" : false,\r\n    \"rotationEnabled\" : true,\r\n    \"status\" : \"ACTIVE\",\r\n    \"apiKeyRestrictionList\" : [1,2,3]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"{{secretId}}\",\r\n    \"userId\" : \"{{userId}}\",\r\n    \"secretId\" : \"secret1\",\r\n    \"keystoreId\" : \"{{keystoreId}}\",\r\n    \"value\" : \"teszt\",\r\n    \"rotationPeriod\" : \"THIRTY_SECONDS\",\r\n    \"returnDecrypted\" : true,\r\n    \"rotationEnabled\" : true,\r\n    \"apiKeyRestrictions\" : [ {{apiKeyId}} ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a secret data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Secret contains API key restrictions\", function() {\r",
									"    const apiKeyId = pm.variables.get(\"apiKeyId\");\r",
									"\r",
									"    pm.expect(pm.response.json().apiKeyRestrictions.filter(id => id === apiKeyId).count()).eq(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-authorization",
								"value": "{{JWTToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret/{{secretId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret",
								"{{secretId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret/{{secretId}}?enabled=false",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret",
								"{{secretId}}"
							],
							"query": [
								{
									"key": "enabled",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret/{{secretId}}?enabled=true",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret",
								"{{secretId}}"
							],
							"query": [
								{
									"key": "enabled",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all secrets of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response list is not empty\", function() {\r",
									"    pm.expect(jsonData.resultList).is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host_url}}/secure/secret/list?direction=ASC&property=id&page=0&size=10",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret",
								"list"
							],
							"query": [
								{
									"key": "direction",
									"value": "ASC"
								},
								{
									"key": "property",
									"value": "id"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get secret value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret/value/{{secretId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret",
								"value",
								"{{secretId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWTToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "test",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/secret/{{secretId}}",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"secret",
								"{{secretId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Secret management.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API",
			"item": [
				{
					"name": "Get a secret via API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json value is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test1",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "apikey2",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/secret/secret1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"secret",
								"secret1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a secret fails / Restricted API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correlation ID exists\", function () {\r",
									"    pm.expect(jsonData.correlationId).to.be.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    pm.expect(jsonData.message).to.be.eq('You are not allowed to use this API key for this secret!');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "test2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8443/api/secret/secret1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"api",
								"secret",
								"secret1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Maintenance",
			"item": [
				{
					"name": "Request user deletion in batch",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"requestId\" : \"{{$guid}}\",\r\n    \"userIds\" : [ 2,3 ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host_url}}/secure/maintenance/request_user_deletion",
							"host": [
								"{{host_url}}"
							],
							"path": [
								"secure",
								"maintenance",
								"request_user_deletion"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "admin_user",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "admin_pass",
			"value": "Test1234",
			"type": "string"
		},
		{
			"key": "admin_user_name",
			"value": "Peter Szrnka",
			"type": "string"
		},
		{
			"key": "admin_user_email",
			"value": "gms@gms.com",
			"type": "string"
		},
		{
			"key": "test_user",
			"value": "test",
			"type": "string"
		},
		{
			"key": "test_pass",
			"value": "Test1234",
			"type": "string"
		},
		{
			"key": "test_user_name",
			"value": "Peter",
			"type": "string"
		},
		{
			"key": "test_user_email",
			"value": "a@b.hu",
			"type": "string"
		}
	]
}